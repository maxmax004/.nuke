version 14.0 v1
Gizmo {
 inputs 2
 onCreate "nukescripts.cattery.create_menu()\npath = \[i for i in nuke.pluginPath() if ''.join(l for l in nuke.thisNode().name() if l.isalpha()).lower() in i.lower()][0]\nif not path in sys.path:\n    sys.path.append(path)\nimport cattery_lama\ncattery_lama.on_create()"
 knobChanged "import cattery_lama\ncattery_lama.knob_changed()"
 onDestroy "nuke.thisNode()\[\"knobChanged\"].setValue(\"\")"
 addUserKnob {20 LaMa}
 addUserKnob {26 localGPU l "Local GPU:" T ""}
 addUserKnob {26 gpuName l "" -STARTLINE T "NVIDIA TITAN RTX"}
 addUserKnob {6 useGPUIfAvailable l "Use GPU if available" t "Select this to render on the <b>Local GPU</b>, if available.\n\nYou can select this even if no GPU is currently available on your machine. The GPU will then be used whenever the script is opened on a machine which does have a GPU available. You should also select this if you wish to render from the command line with the <b>--gpu</b> option.\n\nIf this node requires full frames from its inputs, and is therefore unable to reduce its memory overhead, it will fall back to the CPU if an attempt to render a frame on the GPU fails due to lack of memory. When this occurs, a warning message will be printed to the console." +STARTLINE}
 useGPUIfAvailable true
 addUserKnob {26 ""}
 addUserKnob {26 channelsIn l "Channels In:" t "The channels the model expects as input." T "rgba.red, rgba.green, rgba.blue"}
 addUserKnob {41 in_colorspace l "Input Colorspace" t "Define the colorspace that the input image is in." T Colorspace1.colorspace_in}
}
 Input {
  inputs 0
  name Mask
  xpos 510
  ypos 39
  number 1
 }
set N4d53600 [stack 0]
 Dot {
  name Dot10
  xpos 764
  ypos 42
 }
set N4d53a00 [stack 0]
 Assert {
  expression 0
  message "The Mask is missing alpha"
  name Assert2
  xpos 950
  ypos 231
 }
push $N4d53a00
 Assert {
  expression 0
  message "The input is missing rgb"
  name Assert1
  xpos 840
  ypos 231
 }
push $N4d53a00
 Assert {
  expression 0
  message "The Input is missing rgb and Mask is missing alpha"
  name Assert3
  xpos 730
  ypos 231
 }
 Switch {
  inputs 3
  which {{"\[python \{len(nuke.toNode('Input1').channels())\}] == 0 && \[python \{len(nuke.toNode('Mask').channels())\}] == 0? 0 : \[python \{len(nuke.toNode('Input1').channels())\}] != 0 && \[python \{len(nuke.toNode('Mask').channels())\}] == 0 ? 2 :  \[python \{len(nuke.toNode('Input1').channels())\}] == 0 && \[python \{len(nuke.toNode('Mask').channels())\}] != 0 ? 1 : 0"}}
  name Switch1
  xpos 730
  ypos 447
 }
push $N4d53600
 Dot {
  name Dot1
  xpos 544
  ypos 162
 }
 Input {
  inputs 0
  name Input1
  xpos 290
  ypos 39
 }
 Colorspace {
  colorspace_out sRGB
  name Colorspace1
  knobChanged "nuke.toNode(\"Colorspace2\")\[\"colorspace_out\"].setValue(nuke.thisNode()\[\"colorspace_in\"].value())"
  xpos 290
  ypos 160
 }
 Shuffle2 {
  inputs 2
  fromInput1 {{0} B A}
  fromInput2 {{1} B A}
  in2 alpha
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 1 0 rgba.alpha 0 3"
  name Shuffle1
  xpos 400
  ypos 231
 }
 Inference {
  modelFile "\[lsearch -inline \[plugins -all lama.cat] *.cat]"
  serialiseKnob {}
  name Inference1
  xpos 400
  ypos 375
 }
 Switch {
  inputs 2
  which {{"\[python \{len(nuke.toNode('Input1').channels())\}] == 0 || \[python \{len(nuke.toNode('Mask').channels())\}] == 0? 1:0"}}
  name Switch2
  xpos 400
  ypos 447
 }
 Colorspace {
  colorspace_in sRGB
  name Colorspace2
  selected true
  xpos 400
  ypos 495
 }
set N80e4400 [stack 0]
 Output {
  name Output1
  xpos 400
  ypos 543
 }
push $N80e4400
 Viewer {
  frame_range 1-100
  monitorOutNDISenderName "NukeX - testlama - Viewer1"
  name Viewer1
  xpos 510
  ypos 543
 }
end_group
