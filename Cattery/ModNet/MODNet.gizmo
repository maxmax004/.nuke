version 13.1 v1
Gizmo {
 onCreate "import sys\nthis = nuke.thisNode()\ninference = nuke.toNode(f\"\{this.name()\}.Inference2\")\nthis[\"gpuName\"].setValue(inference[\"gpuName\"].value())\nthis[\"channelsIn\"].setValue(\"rgba.red, rgba.green, rgba.blue\")\ninference.forceValidate()\nis_enabled = inference\[\"modelFile\"\].enabled()\nif (sys.platform.lower() == \"darwin\") and (not inference\[\"useGPUIfAvailable\"\].enabled()): this\[\"useGPUIfAvailable\"\].setValue(False), this\[\"useGPUIfAvailable\"\].setEnabled(False)\nif not is_enabled:\n    for k in this.knobs(): this[k].setEnabled(False)\nthis[\"halfPrecision\"].setVisible(this[\"useGPUIfAvailable\"].enabled())"
 knobChanged "this = nuke.thisNode()\nthis[\"halfPrecision\"].setVisible(this[\"useGPUIfAvailable\"].value())"
 onDestroy "nuke.thisNode()\[\"knobChanged\"].setValue(\"\")"
 addUserKnob {20 MODNet}
 addUserKnob {26 localGPU l "Local GPU:" T ""}
 addUserKnob {26 gpuName l "" -STARTLINE T "Quadro RTX 6000"}
 addUserKnob {6 useGPUIfAvailable l "Use GPU if available" t "Select this to render on the <b>Local GPU</b>, if available.\n\nYou can select this even if no GPU is currently available on your machine. The GPU will then be used whenever the script is opened on a machine which does have a GPU available. You should also select this if you wish to render from the command line with the <b>--gpu</b> option.\n\nIf this node requires full frames from its inputs, and is therefore unable to reduce its memory overhead, it will fall back to the CPU if an attempt to render a frame on the GPU fails due to lack of memory. When this occurs, a warning message will be printed to the console." +STARTLINE}
 useGPUIfAvailable true
 addUserKnob {26 ""}
 addUserKnob {26 channelsIn l "Channels In:" t "The channels the model expects as input." T "rgba.red, rgba.green, rgba.blue"}
 addUserKnob {41 in_colorspace l "Input Colorspace" t "Define the colorspace that the input image is in." T OCIOColorSpace1.in_colorspace}
 addUserKnob {6 resize_input l "Resize input for best results" t "Before applying MODNet to the input, resize it so that either its width or height is of size 512. Images of this size often give the best results. " +STARTLINE}
 addUserKnob {6 halfPrecision l "Optimize for Speed and Memory" t "Whether to process at half float precision. This speeds up execution and enables the processing of larger images, however there is the risk of artifacts with some trained models." +STARTLINE}
 resize_input true
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x388e8e00
  label "Resize image so one side is 512. \nThis gives best results."
  note_font_size 12
  xpos -662
  ypos -62
  bdwidth 257
  bdheight 90
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x8e374aff
  gl_color 0xcc3b36ff
  label "Ensure input to Inference has height \nand width values that are multiples\nof 32."
  note_font_size 12
  xpos -660
  ypos 84
  bdwidth 260
  bdheight 87
 }
 Input {
  inputs 0
  name Input1
  xpos -588
  ypos -102
 }
set N43e05b90 [stack 0]
 Reformat {
  type scale
  scale {{"(min(input.width, input.height) == input.width) ? (512)/input.width :  (512)/input.height"}}
  name Reformat1
  xpos -588
  ypos -3
  disable {{!(parent.resize_input)}}
 }
 OCIOColorSpace {
  in_colorspace scene_linear
  out_colorspace color_picking
  name OCIOColorSpace1
  xpos -588
  ypos 44
 }
 Crop {
  box {0 {"input.height%32 == 0 ? 0 : 0 - (32 - input.height%32) "} {"input.width%32 == 0 ? input.width : (32 - input.width%32) + input.width"} {input.height}}
  reformat true
  crop false
  name Crop4
  xpos -588
  ypos 144
 }
 Inference {
  useGPUIfAvailable {{parent.useGPUIfAvailable x1 0}}
  modelFile "\[lsearch -inline \[plugins -all modnet.cat] *.cat]"
  halfPrecision {{parent.halfPrecision}}
  serialiseKnob {}
  name Inference2
  xpos -588
  ypos 225
 }
 Crop {
  box {0 {"OCIOColorSpace1.height%32 == 0 ? 0 : (32 - OCIOColorSpace1.height%32)"} {"OCIOColorSpace1.width%32 == 0 ? input.width : input.width - (32 - OCIOColorSpace1.width%32)"} {input.height}}
  reformat true
  crop false
  name Crop5
  xpos -588
  ypos 305
 }
 Reformat {
  type scale
  scale {{1/(Reformat1.scale)}}
  name Reformat2
  xpos -588
  ypos 354
  disable {{!(parent.resize_input)}}
 }
set Ne0ff6b60 [stack 0]
 Output {
  name Output1
  xpos -588
  ypos 410
 }
end_group
